package com.complexityclass.videosaver;

import java.io.File;
import java.io.IOException;

import android.app.Activity;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Camera.Size;
import android.media.CamcorderProfile;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.view.Display;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

public class MainActivity extends Activity {
	
	public static final String PATH_TO_SAVE = "/sdcard/";

	SurfaceView surfaceView;
	SurfaceHolder holder;
	HolderCallback holderCallback;
	Camera camera;
	MediaRecorder mediaRecorder;

	File videoFile;

	final int CAMERA_ID = 0;
	final boolean FULL_SCREEN = true;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		setContentView(R.layout.activity_main);

		File pictures = Environment
				.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);

		surfaceView = (SurfaceView) findViewById(R.id.surfaceView);
		holder = surfaceView.getHolder();
		holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);

		holderCallback = new HolderCallback();
		holder.addCallback(holderCallback);

		videoFile = new File(pictures, "myvideo.3gp");
	}

	@Override
	protected void onResume() {
		super.onResume();
		camera = Camera.open(CAMERA_ID);
		// setPreviewSize(FULL_SCREEN);
	}

	@Override
	protected void onPause() {
		super.onPause();
		releaseMediaRecorder();
		if (camera != null)
			camera.release();
		camera = null;
	}

	public void onClickStartRecord(View view) {
		if (prepareVideoRecorder()) {
			mediaRecorder.start();
		} else {
			releaseMediaRecorder();
		}
	}

	public void onClickStopRecord(View view) {
		if (mediaRecorder != null) {
			mediaRecorder.stop();
			releaseMediaRecorder();
		}
	}

	private boolean prepareVideoRecorder() {

		camera.unlock();

		mediaRecorder = new MediaRecorder();

		mediaRecorder.setCamera(camera);
		mediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
		mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
		mediaRecorder.setProfile(CamcorderProfile
				.get(CamcorderProfile.QUALITY_HIGH));
		mediaRecorder.setOutputFile(PATH_TO_SAVE + System.currentTimeMillis() + ".mp4");
		mediaRecorder.setPreviewDisplay(surfaceView.getHolder().getSurface());

		try {
			mediaRecorder.prepare();
		} catch (Exception e) {
			e.printStackTrace();
			releaseMediaRecorder();
			return false;
		}
		return true;
	}

	private void releaseMediaRecorder() {
		if (mediaRecorder != null) {
			mediaRecorder.reset();
			mediaRecorder.release();
			mediaRecorder = null;
			camera.lock();
		}
	}

	class HolderCallback implements SurfaceHolder.Callback {

		@Override
		public void surfaceCreated(SurfaceHolder holder) {
			try {
				camera.setPreviewDisplay(holder);
				camera.startPreview();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int width,
				int height) {
			camera.stopPreview();
			setCameraDisplayOrientation(CAMERA_ID);
			try {
				camera.setPreviewDisplay(holder);
				camera.startPreview();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {

		}

	}

	void setPreviewSize(boolean fullScreen) {
		Display display = getWindowManager().getDefaultDisplay();
		boolean widthIsMax = display.getWidth() > display.getHeight();
		Size size = camera.getParameters().getPreviewSize();

		RectF rectDisplay = new RectF();
		RectF rectPreview = new RectF();
		rectDisplay.set(0, 0, display.getWidth(), display.getHeight());

		if (widthIsMax) {
			rectPreview.set(0, 0, size.width, size.height);
		} else {
			rectPreview.set(0, 0, size.height, size.width);
		}

		Matrix matrix = new Matrix();
		if (!fullScreen) {
			matrix.setRectToRect(rectPreview, rectDisplay,
					Matrix.ScaleToFit.START);
		} else {
			matrix.setRectToRect(rectDisplay, rectPreview,
					Matrix.ScaleToFit.START);
			matrix.invert(matrix);
		}
		matrix.mapRect(rectPreview);
		surfaceView.getLayoutParams().height = (int) (rectPreview.bottom);
		surfaceView.getLayoutParams().width = (int) (rectPreview.right);
	}

	void setCameraDisplayOrientation(int cameraId) {
		int rotation = getWindowManager().getDefaultDisplay().getRotation();
		int degrees = 0;
		switch (rotation) {
		case Surface.ROTATION_0:
			degrees = 0;
			break;
		case Surface.ROTATION_90:
			degrees = 90;
			break;
		case Surface.ROTATION_180:
			degrees = 180;
			break;
		case Surface.ROTATION_270:
			degrees = 270;
			break;
		}

		int result = 0;

		CameraInfo info = new CameraInfo();
		Camera.getCameraInfo(cameraId, info);
		if (info.facing == CameraInfo.CAMERA_FACING_BACK) {
			result = ((360 - degrees) + info.orientation);
		} else if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
			result = ((360 - degrees) - info.orientation);
			result += 360;
		}
		result = result % 360;
		camera.setDisplayOrientation(result);
	}
}